{"ast":null,"code":"// state for user management\n\nimport { request } from \"@/utils\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst userStore = createSlice({\n  name: 'user',\n  initialState: {\n    token: ''\n  },\n  // method\n  reducers: {\n    setToken(state, action) {\n      state.token = action.payload;\n    }\n  }\n});\nconst {\n  setToken\n} = userStore.actions;\n\n// get reducer function\nconst userReducer = userStore.reducer;\n\n// async funciton - get token\nconst fetchLogin = loginForm => {\n  request.post('/authorizations');\n};\nexport { setToken };\nexport default userReducer;","map":{"version":3,"names":["request","createSlice","userStore","name","initialState","token","reducers","setToken","state","action","payload","actions","userReducer","reducer","fetchLogin","loginForm","post"],"sources":["/Users/sophiali/Desktop/Projects/react-article/src/store/modules/user.js"],"sourcesContent":["// state for user management\n\nimport { request } from \"@/utils\";\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst userStore = createSlice({\n    name:'user',\n    initialState: {\n        token:'',\n    },\n    // method\n    reducers: {\n        setToken(state, action){\n            state.token = action.payload\n        }\n    }\n})\n\nconst {setToken} = userStore.actions\n\n// get reducer function\nconst userReducer = userStore.reducer;\n\n// async funciton - get token\nconst fetchLogin = (loginForm) =>{\n    request.post('/authorizations')\n}\n\nexport {setToken}\n\nexport default userReducer;\n"],"mappings":"AAAA;;AAEA,SAASA,OAAO,QAAQ,SAAS;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC1BE,IAAI,EAAC,MAAM;EACXC,YAAY,EAAE;IACVC,KAAK,EAAC;EACV,CAAC;EACD;EACAC,QAAQ,EAAE;IACNC,QAAQA,CAACC,KAAK,EAAEC,MAAM,EAAC;MACnBD,KAAK,CAACH,KAAK,GAAGI,MAAM,CAACC,OAAO;IAChC;EACJ;AACJ,CAAC,CAAC;AAEF,MAAM;EAACH;AAAQ,CAAC,GAAGL,SAAS,CAACS,OAAO;;AAEpC;AACA,MAAMC,WAAW,GAAGV,SAAS,CAACW,OAAO;;AAErC;AACA,MAAMC,UAAU,GAAIC,SAAS,IAAI;EAC7Bf,OAAO,CAACgB,IAAI,CAAC,iBAAiB,CAAC;AACnC,CAAC;AAED,SAAQT,QAAQ;AAEhB,eAAeK,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}